/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import request = require('request');
import http = require('http');
import Promise = require('bluebird');

let defaultBasePath = 'http://petstore.swagger.io/v1';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

/* tslint:disable:no-unused-variable */

export class Account {
    'id': string;
    'username': string;
    'passcode': string;
    'email': string;
    'participants': Array<Participant>;
    'parameters': PlanParameters;
    'plan': Plan;
    'shoppingList': ShoppingList;
    'procurements': Array<Procurement>;
}

export class AccountResponse {
    'success': boolean;
    'account': Account;
}

export class BasicResponse {
    'success': boolean;
}

export class Density {
    'mass': number;
    'massUnit': string;
    'volume': number;
    'volumeUnit': string;
}

export class Ingredient {
    'materialId': string;
    'name': string;
    'quantity': Quantity;
    'unit': string;
    'group': number;
}

export class Instruction {
    'text': string;
    'delay': string;
}

export class Material {
    'id': string;
    'name': string;
    'notes': string;
    'url': string;
    'provenance': string;
    'densities': Array<Density>;
    'nutrition': Nutrition;
    'mass': number;
}

export class MaterialResponse {
    'success': boolean;
    'material': Material;
}

export class Measure {
    'value': number;
    'unit': string;
    'sigma': number;
}

export class Nutrition {
    'kcal': number;
    'fat': number;
    'saturated': number;
    'monosaturated': number;
    'polyunsaturated': number;
    'cholesterol': number;
    'sodium': number;
    'potassium': number;
    'sugar': number;
    'carbs': number;
    'fiber': number;
    'protein': number;
}

export class ParametersResponse {
    'success': boolean;
    'parameters': PlanParameters;
}

export class Participant {
    'kcal': number;
    'id': string;
    'name': string;
    'tdee': TDEE;
    'enabled': boolean;
}

export class ParticipantResponse {
    'success': boolean;
    'participant': Participant;
}

export class ParticipantsResponse {
    'success': boolean;
    'participants': Array<Participant>;
}

export class Plan {
    'id': string;
    'selections': Array<Selection>;
    'participants': Array<Participant>;
    'parameters': PlanParameters;
}

export class PlanParameters {
    'numberOfDays': number;
}

export class PlanResponse {
    'success': boolean;
    'plan': Plan;
}

export class Portion {
    'participantId': string;
    'name': string;
    'quantity': Quantity;
}

export class Preparation {
    'shoppingList': ShoppingList;
    'recipes': Array<RenderedRecipe>;
}

export class PreparationResponse {
    'success': boolean;
    'selection': Preparation;
}

export class Procurement {
    'materialId': string;
    'quantity': Quantity;
    'name': string;
}

export class ProcurementResponse {
    'success': boolean;
    'procurement': Procurement;
}

export class ProcurementsResponse {
    'success': boolean;
    'procurements': Array<Procurement>;
}

export class Quantity {
    'measures': Array<Measure>;
    'provenance': string;
}

export class Recipe {
    'id': string;
    'name': string;
    'instructions': Array<Instruction>;
    'ingredients': Array<Ingredient>;
    'groups': Array<RecipeGroup>;
}

export class RecipeGroup {
    'number': number;
    'name': string;
    'quantity': Quantity;
    'divideByUnitType': string;
    'mass': number;
    'count': string;
}

export class RecipeResponse {
    'success': boolean;
    'recipe': Recipe;
}

export class RenderedIngredient {
    'materialId': string;
    'name': string;
    'quantity': Quantity;
    'unit': string;
    'group': number;
    'nutrition': Nutrition;
    'material': Material;
}

export class RenderedRecipe {
    'id': string;
    'name': string;
    'instructions': Array<Instruction>;
    'ingredients': Array<Ingredient>;
    'groups': Array<RecipeGroup>;
    'nutrition': Nutrition;
    'factor': number;
}

export class RenderedRecipeGroup {
    'number': number;
    'name': string;
    'quantity': Quantity;
    'divideByUnitType': string;
    'mass': number;
    'count': string;
    'etc': string;
    'portions': Array<Portion>;
}

export class Selection {
    'id': string;
    'meal': string;
    'recipeId': string;
}

export class SelectionResponse {
    'success': boolean;
    'selection': Selection;
}

export class SelectionsResponse {
    'success': boolean;
    'selections': Array<Selection>;
}

export class ShoppingList {
    'items': Array<ShoppingListItem>;
}

export class ShoppingListItem {
    'materialId': string;
    'quantity': Quantity;
    'name': string;
}

export class ShoppingListResponse {
    'success': boolean;
    'shoppingList': ShoppingList;
}

export class TDEE {
    'sex': string;
    'age': number;
    'height': number;
    'weight': number;
    'bmr': number;
    'activity': string;
    'targetWeight': number;
    'targetKCal': number;
}


export interface Authentication {
    /**
    * Apply authentication settings to header and query params.
    */
    applyToRequest(requestOptions: request.Options): void;
}

export class HttpBasicAuth implements Authentication {
    public username: string;
    public password: string;
    applyToRequest(requestOptions: request.Options): void {
        requestOptions.auth = {
            username: this.username, password: this.password
        }
    }
}

export class ApiKeyAuth implements Authentication {
    public apiKey: string;

    constructor(private location: string, private paramName: string) {
    }

    applyToRequest(requestOptions: request.Options): void {
        if (this.location == "query") {
            (<any>requestOptions.qs)[this.paramName] = this.apiKey;
        } else if (this.location == "header") {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    }
}

export class OAuth implements Authentication {
    public accessToken: string;

    applyToRequest(requestOptions: request.Options): void {
        requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
    }
}

export class VoidAuth implements Authentication {
    public username: string;
    public password: string;
    applyToRequest(requestOptions: request.Options): void {
        // Do nothing
    }
}

export enum HealthfullApiApiKeys {
}

export class HealthfullApi {
    protected basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth()
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    public setApiKey(key: HealthfullApiApiKeys, value: string) {
        this.authentications[HealthfullApiApiKeys[key]].apiKey = value;
    }
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                console.error("This shit is broken, yo. I guess you use it?")
                //objA[key] = objB[key];
            }
        }
        return <T1&T2>objA;
    }
    /**
     * 
     * null
     * @param id The account ID.
     */
    public accountIdGet (id: string) : Promise<{ response: http.ClientResponse; body: AccountResponse;  }> {
        const localVarPath = this.basePath + '/account/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling accountIdGet.');
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: AccountResponse;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * null
     * @param id The account ID.
     */
    public accountIdParticipantsGet (id: string) : Promise<{ response: http.ClientResponse; body: ParticipantsResponse;  }> {
        const localVarPath = this.basePath + '/account/{id}/participants'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling accountIdParticipantsGet.');
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ParticipantsResponse;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * null
     * @param id The account ID.
     * @param partId The participant ID in the account.
     */
    public accountIdParticipantsPartIdDelete (id: string, partId: string) : Promise<{ response: http.ClientResponse; body: BasicResponse;  }> {
        const localVarPath = this.basePath + '/account/{id}/participants/{partId}'
            .replace('{' + 'id' + '}', String(id))
            .replace('{' + 'partId' + '}', String(partId));
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling accountIdParticipantsPartIdDelete.');
        }

        // verify required parameter 'partId' is not null or undefined
        if (partId === null || partId === undefined) {
            throw new Error('Required parameter partId was null or undefined when calling accountIdParticipantsPartIdDelete.');
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: BasicResponse;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * null
     * @param id The account ID.
     * @param partId The participant ID in the account.
     */
    public accountIdParticipantsPartIdGet (id: string, partId: string) : Promise<{ response: http.ClientResponse; body: ParticipantResponse;  }> {
        const localVarPath = this.basePath + '/account/{id}/participants/{partId}'
            .replace('{' + 'id' + '}', String(id))
            .replace('{' + 'partId' + '}', String(partId));
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling accountIdParticipantsPartIdGet.');
        }

        // verify required parameter 'partId' is not null or undefined
        if (partId === null || partId === undefined) {
            throw new Error('Required parameter partId was null or undefined when calling accountIdParticipantsPartIdGet.');
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ParticipantResponse;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * null
     * @param id The account ID.
     * @param partId The participant ID in the account.
     * @param participant null
     */
    public accountIdParticipantsPartIdPost (id: string, partId: string, participant?: Participant) : Promise<{ response: http.ClientResponse; body: ParticipantResponse;  }> {
        const localVarPath = this.basePath + '/account/{id}/participants/{partId}'
            .replace('{' + 'id' + '}', String(id))
            .replace('{' + 'partId' + '}', String(partId));
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling accountIdParticipantsPartIdPost.');
        }

        // verify required parameter 'partId' is not null or undefined
        if (partId === null || partId === undefined) {
            throw new Error('Required parameter partId was null or undefined when calling accountIdParticipantsPartIdPost.');
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: participant,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ParticipantResponse;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * null
     * @param id The account ID.
     * @param partId The participant ID in the account.
     * @param participant null
     */
    public accountIdParticipantsPartIdPut (id: string, partId: string, participant?: Participant) : Promise<{ response: http.ClientResponse; body: ParticipantResponse;  }> {
        const localVarPath = this.basePath + '/account/{id}/participants/{partId}'
            .replace('{' + 'id' + '}', String(id))
            .replace('{' + 'partId' + '}', String(partId));
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling accountIdParticipantsPartIdPut.');
        }

        // verify required parameter 'partId' is not null or undefined
        if (partId === null || partId === undefined) {
            throw new Error('Required parameter partId was null or undefined when calling accountIdParticipantsPartIdPut.');
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: participant,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ParticipantResponse;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * null
     * @param id The account ID.
     */
    public accountIdPlanClearPost (id: string) : Promise<{ response: http.ClientResponse; body: PlanResponse;  }> {
        const localVarPath = this.basePath + '/account/{id}/plan/clear'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling accountIdPlanClearPost.');
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PlanResponse;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * null
     * @param id The account ID.
     */
    public accountIdPlanGet (id: string) : Promise<{ response: http.ClientResponse; body: PlanResponse;  }> {
        const localVarPath = this.basePath + '/account/{id}/plan'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling accountIdPlanGet.');
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PlanResponse;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * null
     * @param id The account ID.
     */
    public accountIdPlanInitializePost (id: string) : Promise<{ response: http.ClientResponse; body: PlanResponse;  }> {
        const localVarPath = this.basePath + '/account/{id}/plan/initialize'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling accountIdPlanInitializePost.');
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PlanResponse;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * null
     * @param id The account ID.
     */
    public accountIdPlanParametersGet (id: string) : Promise<{ response: http.ClientResponse; body: ParametersResponse;  }> {
        const localVarPath = this.basePath + '/account/{id}/plan/parameters'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling accountIdPlanParametersGet.');
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ParametersResponse;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * null
     * @param id The account ID.
     * @param parameterBlock null
     */
    public accountIdPlanParametersPost (id: string, parameterBlock?: PlanParameters) : Promise<{ response: http.ClientResponse; body: ParametersResponse;  }> {
        const localVarPath = this.basePath + '/account/{id}/plan/parameters'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling accountIdPlanParametersPost.');
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: parameterBlock,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ParametersResponse;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * null
     * @param id The account ID.
     */
    public accountIdPlanParticipantsGet (id: string) : Promise<{ response: http.ClientResponse; body: ParticipantsResponse;  }> {
        const localVarPath = this.basePath + '/account/{id}/plan/participants'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling accountIdPlanParticipantsGet.');
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ParticipantsResponse;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * null
     * @param id The account ID.
     * @param partId The participant ID in the account.
     */
    public accountIdPlanParticipantsPartIdDelete (id: string, partId: string) : Promise<{ response: http.ClientResponse; body: BasicResponse;  }> {
        const localVarPath = this.basePath + '/account/{id}/plan/participants/{partId}'
            .replace('{' + 'id' + '}', String(id))
            .replace('{' + 'partId' + '}', String(partId));
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling accountIdPlanParticipantsPartIdDelete.');
        }

        // verify required parameter 'partId' is not null or undefined
        if (partId === null || partId === undefined) {
            throw new Error('Required parameter partId was null or undefined when calling accountIdPlanParticipantsPartIdDelete.');
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: BasicResponse;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * null
     * @param id The account ID.
     * @param partId The participant ID in the account.
     */
    public accountIdPlanParticipantsPartIdGet (id: string, partId: string) : Promise<{ response: http.ClientResponse; body: ParticipantResponse;  }> {
        const localVarPath = this.basePath + '/account/{id}/plan/participants/{partId}'
            .replace('{' + 'id' + '}', String(id))
            .replace('{' + 'partId' + '}', String(partId));
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling accountIdPlanParticipantsPartIdGet.');
        }

        // verify required parameter 'partId' is not null or undefined
        if (partId === null || partId === undefined) {
            throw new Error('Required parameter partId was null or undefined when calling accountIdPlanParticipantsPartIdGet.');
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ParticipantResponse;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * null
     * @param id The account ID.
     * @param partId The participant ID in the account.
     * @param participant null
     */
    public accountIdPlanParticipantsPartIdPost (id: string, partId: string, participant?: Participant) : Promise<{ response: http.ClientResponse; body: ParticipantResponse;  }> {
        const localVarPath = this.basePath + '/account/{id}/plan/participants/{partId}'
            .replace('{' + 'id' + '}', String(id))
            .replace('{' + 'partId' + '}', String(partId));
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling accountIdPlanParticipantsPartIdPost.');
        }

        // verify required parameter 'partId' is not null or undefined
        if (partId === null || partId === undefined) {
            throw new Error('Required parameter partId was null or undefined when calling accountIdPlanParticipantsPartIdPost.');
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: participant,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ParticipantResponse;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * null
     * @param id The account ID.
     * @param partId The participant ID in the account.
     * @param participant null
     */
    public accountIdPlanParticipantsPartIdPut (id: string, partId: string, participant?: Participant) : Promise<{ response: http.ClientResponse; body: ParticipantResponse;  }> {
        const localVarPath = this.basePath + '/account/{id}/plan/participants/{partId}'
            .replace('{' + 'id' + '}', String(id))
            .replace('{' + 'partId' + '}', String(partId));
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling accountIdPlanParticipantsPartIdPut.');
        }

        // verify required parameter 'partId' is not null or undefined
        if (partId === null || partId === undefined) {
            throw new Error('Required parameter partId was null or undefined when calling accountIdPlanParticipantsPartIdPut.');
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: participant,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ParticipantResponse;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * null
     * @param id The account ID.
     */
    public accountIdPlanParticipantsPost (id: string) : Promise<{ response: http.ClientResponse; body: ParticipantResponse;  }> {
        const localVarPath = this.basePath + '/account/{id}/plan/participants'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling accountIdPlanParticipantsPost.');
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ParticipantResponse;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * null
     * @param id The account ID.
     */
    public accountIdPlanPreparationGet (id: string) : Promise<{ response: http.ClientResponse; body: PreparationResponse;  }> {
        const localVarPath = this.basePath + '/account/{id}/plan/preparation'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling accountIdPlanPreparationGet.');
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PreparationResponse;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * null
     * @param id The account ID.
     */
    public accountIdPlanSelectionsGet (id: string) : Promise<{ response: http.ClientResponse; body: SelectionsResponse;  }> {
        const localVarPath = this.basePath + '/account/{id}/plan/selections'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling accountIdPlanSelectionsGet.');
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: SelectionsResponse;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * null
     * @param id The account ID.
     * @param selection null
     */
    public accountIdPlanSelectionsPost (id: string, selection?: Selection) : Promise<{ response: http.ClientResponse; body: SelectionResponse;  }> {
        const localVarPath = this.basePath + '/account/{id}/plan/selections'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling accountIdPlanSelectionsPost.');
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: selection,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: SelectionResponse;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * null
     * @param id The account ID.
     * @param selectionId The selection ID in the plan to address.
     */
    public accountIdPlanSelectionsSelectionIdDelete (id: string, selectionId: string) : Promise<{ response: http.ClientResponse; body: BasicResponse;  }> {
        const localVarPath = this.basePath + '/account/{id}/plan/selections/{selectionId}'
            .replace('{' + 'id' + '}', String(id))
            .replace('{' + 'selectionId' + '}', String(selectionId));
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling accountIdPlanSelectionsSelectionIdDelete.');
        }

        // verify required parameter 'selectionId' is not null or undefined
        if (selectionId === null || selectionId === undefined) {
            throw new Error('Required parameter selectionId was null or undefined when calling accountIdPlanSelectionsSelectionIdDelete.');
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: BasicResponse;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * null
     * @param id The account ID.
     * @param selectionId The selection ID in the plan to address.
     * @param selection null
     */
    public accountIdPlanSelectionsSelectionIdPost (id: string, selectionId: string, selection?: Selection) : Promise<{ response: http.ClientResponse; body: SelectionResponse;  }> {
        const localVarPath = this.basePath + '/account/{id}/plan/selections/{selectionId}'
            .replace('{' + 'id' + '}', String(id))
            .replace('{' + 'selectionId' + '}', String(selectionId));
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling accountIdPlanSelectionsSelectionIdPost.');
        }

        // verify required parameter 'selectionId' is not null or undefined
        if (selectionId === null || selectionId === undefined) {
            throw new Error('Required parameter selectionId was null or undefined when calling accountIdPlanSelectionsSelectionIdPost.');
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: selection,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: SelectionResponse;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * null
     * @param id The account ID.
     */
    public accountIdProcurementsGet (id: string) : Promise<{ response: http.ClientResponse; body: ProcurementsResponse;  }> {
        const localVarPath = this.basePath + '/account/{id}/procurements'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling accountIdProcurementsGet.');
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ProcurementsResponse;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * null
     * @param id The account ID.
     * @param procurement null
     */
    public accountIdProcurementsPost (id: string, procurement?: Procurement) : Promise<{ response: http.ClientResponse; body: ProcurementResponse;  }> {
        const localVarPath = this.basePath + '/account/{id}/procurements'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling accountIdProcurementsPost.');
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: procurement,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ProcurementResponse;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * null
     * @param id The account ID.
     */
    public accountIdShoppinglistGet (id: string) : Promise<{ response: http.ClientResponse; body: ShoppingListResponse;  }> {
        const localVarPath = this.basePath + '/account/{id}/shoppinglist'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling accountIdShoppinglistGet.');
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ShoppingListResponse;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * null
     * @param id The account ID.
     */
    public accountIdShoppinglistInitializePost (id: string) : Promise<{ response: http.ClientResponse; body: ShoppingListResponse;  }> {
        const localVarPath = this.basePath + '/account/{id}/shoppinglist/initialize'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling accountIdShoppinglistInitializePost.');
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ShoppingListResponse;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * null
     */
    public authSimpleGet () : Promise<{ response: http.ClientResponse; body: BasicResponse;  }> {
        const localVarPath = this.basePath + '/auth/simple';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: BasicResponse;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * null
     * @param id The material (food) ID.
     */
    public materialIdGet (id: string) : Promise<{ response: http.ClientResponse; body: MaterialResponse;  }> {
        const localVarPath = this.basePath + '/material/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling materialIdGet.');
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: MaterialResponse;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * null
     * @param id The recipe ID.
     */
    public recipeIdGet (id: string) : Promise<{ response: http.ClientResponse; body: RecipeResponse;  }> {
        const localVarPath = this.basePath + '/recipe/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling recipeIdGet.');
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: RecipeResponse;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * null
     * @param id The recipe ID.
     * @param factor The scaling factor by which to multiply the recipe.
     */
    public recipeIdScaledFactorGet (id: string, factor: number) : Promise<{ response: http.ClientResponse; body: RecipeResponse;  }> {
        const localVarPath = this.basePath + '/recipe/{id}/scaled/{factor}'
            .replace('{' + 'id' + '}', String(id))
            .replace('{' + 'factor' + '}', String(factor));
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling recipeIdScaledFactorGet.');
        }

        // verify required parameter 'factor' is not null or undefined
        if (factor === null || factor === undefined) {
            throw new Error('Required parameter factor was null or undefined when calling recipeIdScaledFactorGet.');
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: RecipeResponse;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
